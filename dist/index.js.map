{"version":3,"file":"index.js","sources":["../src/lib/CropPoint.tsx","../src/lib/CropPoints.tsx","../src/lib/CropPointsDelimiters.tsx","../src/lib/utils.ts","../src/lib/Canvas.tsx","../src/lib/imgManipulation.ts","../src/components/Cropper.tsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, { useCallback } from 'react';\nimport type { DraggableEventHandler } from 'react-draggable';\nimport Draggable from 'react-draggable';\n\nimport type { CropPoints, Point } from '../types';\n\nconst buildCropPointVertexStyle = (size: number, pointBgColor: string, pointBorder: string): React.CSSProperties => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst buildCropPointEdgeStyle = (size: number, pointBgColor: string, pointBorder: string, flip: boolean): React.CSSProperties => ({\n  width: flip ? size / 2 : size,\n  height: flip ? size : size / 2,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  marginTop: flip ? undefined : size / 4,\n  marginLeft: flip ? size / 4 : undefined,\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds,\n}: {\n  cropPoints: CropPoints;\n  pointArea: keyof CropPoints;\n  defaultPosition: Point;\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  onStop: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  onDrag: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}) => {\n  const onDrag: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag]\n  );\n\n  const onStop: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag, cropPoints]\n  );\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2,\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n      axis={pointArea === 'top' || pointArea === 'bottom' ? 'y' : pointArea === 'left' || pointArea === 'right' ? 'x' : 'both'}\n    >\n      <div\n        style={\n          ['top', 'bottom', 'left', 'right'].includes(pointArea)\n            ? buildCropPointEdgeStyle(pointSize, pointBgColor, pointBorder, pointArea === 'left' || pointArea === 'right')\n            : buildCropPointVertexStyle(pointSize, pointBgColor, pointBorder)\n        }\n      />\n    </Draggable>\n  );\n};\n\nexport default CropPoint;\n","import React from 'react';\n\nimport type * as Types from '../types';\nimport CropPoint from './CropPoint';\n\ninterface ICropPointsProps {\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  cropPoints: Types.CropPoints;\n  previewDims: Types.PreviewDimensions;\n  onDrag: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  onStop: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}\n\nconst CropPoints: React.FC<ICropPointsProps> = (props) => {\n  const { previewDims, ...otherProps } = props;\n  return (\n    <React.Fragment>\n      <CropPoint pointArea=\"top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left\" defaultPosition={{ x: previewDims.width, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left-top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-top\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint\n        pointArea=\"left-bottom\"\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height,\n        }}\n        {...otherProps}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default CropPoints;\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport type { CropPoints, PreviewDimensions } from '../types';\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2',\n  pointSize,\n  displayGrid = true,\n}: {\n  cropPoints: CropPoints;\n  previewDims: PreviewDimensions;\n  lineWidth?: number;\n  lineColor?: string;\n  pointSize: number;\n  displayGrid?: boolean;\n}) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    ctx?.clearRect(0, 0, previewDims.width, previewDims.height);\n  }, [canvas.current, previewDims]);\n\n  const drawShape = useCallback(() => {\n    const {\n      'left-top': leftTop,\n      'right-top': rightTop,\n      'right-bottom': rightBottom,\n      'left-bottom': leftBottom,\n      left,\n      top,\n      right,\n      bottom,\n    } = cropPoints;\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    if (!ctx) return;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    const pointRadius = pointSize / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(leftTop.x + pointRadius, leftTop.y);\n    ctx.lineTo(rightTop.x - pointRadius, rightTop.y);\n\n    ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n    ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n    ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n    ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n\n    ctx.moveTo(leftBottom.x, leftBottom.y - pointRadius);\n    ctx.lineTo(leftTop.x, leftTop.y + pointRadius);\n\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.clearRect(top.x - pointRadius, top.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(right.x - pointRadius, right.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(bottom.x - pointRadius, bottom.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(left.x - pointRadius, left.y - pointRadius, pointSize, pointSize);\n\n    if (displayGrid) {\n      ctx.lineWidth = lineWidth / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(leftTop.x - pointRadius, leftTop.y);\n      ctx.lineTo(leftTop.x + pointRadius, leftTop.y);\n      ctx.moveTo(leftTop.x, leftTop.y + pointRadius);\n      ctx.lineTo(leftTop.x, leftTop.y - pointRadius);\n\n      ctx.moveTo(rightTop.x - pointRadius, rightTop.y);\n      ctx.lineTo(rightTop.x + pointRadius, rightTop.y);\n      ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n      ctx.lineTo(rightTop.x, rightTop.y - pointRadius);\n\n      ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n      ctx.lineTo(rightBottom.x + pointRadius, rightBottom.y);\n      ctx.moveTo(rightBottom.x, rightBottom.y + pointRadius);\n      ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n      ctx.moveTo(leftBottom.x - pointRadius, leftBottom.y);\n      ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n      ctx.moveTo(leftBottom.x, leftBottom.y + pointRadius);\n      ctx.lineTo(leftBottom.x, leftBottom.y - pointRadius);\n\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }, [cropPoints, canvas.current]);\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas();\n      drawShape();\n    }\n  }, [cropPoints, canvas.current]);\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  );\n};\n\nexport default CropPointsDelimiters;\n","import type { Point } from '../types';\n\nexport const readFile = (file: File | string): Promise<string | null> => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (_event) => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = (err) => {\n        reject(err);\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file);\n  }\n  return Promise.resolve(null);\n};\n\nexport const calcDims = (width: number, height: number, externalMaxWidth?: number, externalMaxHeight?: number) => {\n  const ratio = width / height;\n\n  const maxWidth = externalMaxWidth || window.innerWidth;\n  const maxHeight = externalMaxHeight || window.innerHeight;\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio,\n  };\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight;\n    calculated.width = Math.round(maxHeight * ratio);\n  }\n  return calculated;\n};\n\nexport function isCrossOriginURL(url: string) {\n  const { location } = window;\n  const parts = url.match(/^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i);\n\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n\nexport function calculateMidpoint(p1: Point, p2: Point) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable no-param-reassign */\nimport type { Mat, Rect } from 'opencv-react';\nimport { useOpenCv } from 'opencv-react';\nimport React, { Fragment, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\n\nimport type * as Types from '../types';\nimport CropPoints from './CropPoints';\nimport CropPointsDelimiters from './CropPointsDelimiters';\nimport { applyFilter, mirror, rotate, transform } from './imgManipulation';\nimport { calcDims, calculateMidpoint, isCrossOriginURL, readFile } from './utils';\n\nconst buildImgContainerStyle = (previewDims: Types.PreviewDimensions) => ({\n  width: previewDims.width,\n  height: previewDims.height,\n});\n\nlet imageResizeRatio = 0;\n\nexport interface ICropperRef {\n  image: File | string;\n  onDragStop?: (s: Types.CropperState) => void;\n  onChange?: (s: Types.CropperState) => void;\n  cropperRef?: React.ForwardedRef<Types.CropperRef>;\n  pointSize?: number;\n  lineWidth?: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  lineColor?: string;\n  maxWidth?: number;\n  maxHeight?: number;\n  displayGrid?: boolean;\n  openCvPath?: string;\n}\n\nconst Canvas: React.FC<ICropperRef> = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight,\n  displayGrid,\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv();\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  const magnifierCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [previewDims, setPreviewDims] = useState<Types.PreviewDimensions>();\n  const [cropPoints, setCropPoints] = useState<Types.CropPoints>();\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState<'crop' | 'preview'>('crop');\n\n  const setPreviewPaneDimensions = () => {\n    if (!canvasRef.current) return;\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(canvasRef.current.width, canvasRef.current.height, maxWidth, maxHeight);\n    setPreviewDims(newPreviewDims);\n\n    if (!previewCanvasRef.current) return;\n    previewCanvasRef.current.width = newPreviewDims.width;\n    previewCanvasRef.current.height = newPreviewDims.height;\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width;\n  };\n\n  const showPreview = (imageMat?: Mat) => {\n    if (!cv || !canvasRef.current || !previewCanvasRef.current) return;\n    const src = imageMat || cv.imread(canvasRef.current);\n    const dst = new cv.Mat();\n    const dsize = new cv.Size(0, 0);\n    cv.resize(src, dst, dsize, imageResizeRatio, imageResizeRatio, cv.INTER_AREA);\n    cv.imshow(previewCanvasRef.current, dst);\n    src.delete();\n    dst.delete();\n  };\n\n  const detectContours = () => {\n    if (!cv || !canvasRef.current) return;\n    const dst = cv.imread(canvasRef.current);\n    const ksize = new cv.Size(5, 5);\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n    cv.Canny(dst, dst, 75, 200);\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n    const contours = new cv.MatVector();\n    const hierarchy = new cv.Mat();\n    cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n    const rect = cv.boundingRect(dst);\n    dst.delete();\n    hierarchy.delete();\n    contours.delete();\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key as keyof Rect] *= imageResizeRatio;\n    });\n\n    const contourCoordinates = {\n      top: { x: rect.x + rect.width / 2, y: rect.y },\n      bottom: { x: rect.x + rect.width / 2, y: rect.y + rect.height },\n      left: { x: rect.x, y: rect.y + rect.height / 2 },\n      right: { x: rect.x + rect.width, y: rect.y + rect.height / 2 },\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height,\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height },\n    };\n\n    setCropPoints(contourCoordinates);\n  };\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop');\n    },\n    mirror: (horizontal: boolean) => {\n      if (!cv || !canvasRef.current) return;\n      mirror(cv, canvasRef.current, horizontal);\n      setPreviewPaneDimensions();\n      showPreview();\n      detectContours();\n    },\n    rotate: (angle: 90 | 180 | 270) => {\n      if (!cv || !canvasRef.current) return;\n      rotate(cv, canvasRef.current, angle);\n      setPreviewPaneDimensions();\n      showPreview();\n      detectContours();\n    },\n    done: async (opts = {}) => {\n      return new Promise<Blob>((resolve, reject) => {\n        setLoading(true);\n        if (!cv || !canvasRef.current || !cropPoints) {\n          reject(new Error('OpenCV not loaded or canvas not initialized'));\n          return;\n        }\n\n        transform(cv, canvasRef.current, cropPoints, imageResizeRatio, setPreviewPaneDimensions);\n        applyFilter(cv, canvasRef.current, opts.filterCvParams);\n        if (opts.preview) {\n          setMode('preview');\n        }\n        canvasRef.current.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create blob'));\n            } else {\n              resolve(blob);\n            }\n            setLoading(false);\n          },\n          image instanceof File ? image.type : 'image/png'\n        );\n      });\n    },\n  }));\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview();\n    }\n  }, [mode]);\n\n  const createCanvas = async (src: string) => {\n    return new Promise<void>((resolve) => {\n      const img = document.createElement('img');\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas');\n        canvasRef.current.width = img.width;\n        canvasRef.current.height = img.height;\n        const ctx = canvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n        ctx?.drawImage(img, 0, 0);\n        setPreviewPaneDimensions();\n        resolve();\n      };\n      if (isCrossOriginURL(src)) img.crossOrigin = 'anonymous';\n      img.src = src;\n    });\n  };\n\n  const clearMagnifier = () => {\n    if (!magnifierCanvasRef.current) return;\n    const magnCtx = magnifierCanvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    magnCtx?.clearRect(0, 0, magnifierCanvasRef.current.width, magnifierCanvasRef.current.height);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onChange?.({ ...cropPoints!, loading });\n  }, [cropPoints, loading]);\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image);\n      if (!src) return;\n      await createCanvas(src);\n      showPreview();\n      detectContours();\n      setLoading(false);\n    };\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap();\n    } else {\n      setLoading(true);\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode]);\n\n  const updateCropPoints = (position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n\n    if (area.includes('-')) {\n      cp[area] = { x, y };\n      if (area.includes('left')) {\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n      }\n      if (area.includes('right')) {\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n      if (area.includes('top')) {\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n      }\n      if (area.includes('bottom')) {\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      }\n    } else {\n      const dx = x - cp[area].x;\n      const dy = y - cp[area].y;\n      if (area === 'left') {\n        cp['left-top'] = { x, y: cp['left-top'].y + dy };\n        cp['left-bottom'] = { x, y: cp['left-bottom'].y + dy };\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'right') {\n        cp['right-top'] = { x, y: cp['right-top'].y + dy };\n        cp['right-bottom'] = { x, y: cp['right-bottom'].y + dy };\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'top') {\n        cp['left-top'] = { x: cp['left-top'].x + dx, y };\n        cp['right-top'] = { x: cp['right-top'].x + dx, y };\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      } else if (area === 'bottom') {\n        cp['left-bottom'] = { x: cp['left-bottom'].x + dx, y };\n        cp['right-bottom'] = { x: cp['right-bottom'].x + dx, y };\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n    }\n    setCropPoints((prev) => ({ ...prev, ...cp } as Types.CropPoints));\n  };\n\n  const onDrag = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n\n    // Display the magnifier only when the user is dragging the vertices.\n    if (area.includes('-')) {\n      const magnCtx = magnifierCanvasRef.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n\n      if (!previewCanvasRef.current) return;\n\n      // TODO we should make those 5, 10 and 20 values proportionate\n      // to the point size\n      magnCtx?.drawImage(\n        previewCanvasRef.current,\n        x - (pointSize - 10),\n        y - (pointSize - 10),\n        pointSize + 5,\n        pointSize + 5,\n        x + 10,\n        y - 90,\n        pointSize + 20,\n        pointSize + 20\n      );\n    }\n    updateCropPoints(position, area, cp);\n  }, []);\n\n  const onStop = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n    updateCropPoints(position, area, cp);\n    onDragStop?.({ ...cp, [area]: { x, y } });\n  }, []);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims)),\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && previewCanvasRef.current && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef.current.offsetLeft - pointSize / 2,\n              top: previewCanvasRef.current.offsetTop - pointSize / 2,\n              right: previewCanvasRef.current.offsetLeft - pointSize / 2 + previewCanvasRef.current.offsetWidth,\n              bottom: previewCanvasRef.current.offsetTop - pointSize / 2 + previewCanvasRef.current.offsetHeight,\n            }}\n          />\n          <CropPointsDelimiters\n            displayGrid={displayGrid}\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none',\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas style={{ zIndex: 5, pointerEvents: 'none' }} ref={previewCanvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","/* eslint-disable no-param-reassign */\nimport type { CV } from 'opencv-react';\n\nimport type { CropPoints, OpenCVFilterProps } from '../types';\n\nexport const transform = (\n  cv: CV,\n  docCanvas: HTMLCanvasElement,\n  cropPoints: CropPoints,\n  imageResizeRatio: number,\n  setPreviewPaneDimensions: () => void\n) => {\n  const dst = cv.imread(docCanvas);\n\n  const bR = cropPoints['right-bottom'];\n  const bL = cropPoints['left-bottom'];\n  const tR = cropPoints['right-top'];\n  const tL = cropPoints['left-top'];\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [point.x / imageResizeRatio, point.y / imageResizeRatio]);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio;\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio;\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1],\n  ];\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...sourceCoordinates));\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...destCoordinates));\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight);\n  // perform warp\n  cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n  cv.imshow(docCanvas, dst);\n\n  dst.delete();\n  Ms.delete();\n  Md.delete();\n  transformMatrix.delete();\n\n  setPreviewPaneDimensions();\n};\n\nexport const applyFilter = (cv: CV, docCanvas: HTMLCanvasElement, filterCvParams?: Partial<OpenCVFilterProps>) => {\n  // default options\n  const options = {\n    blur: false,\n    th: false,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: false,\n    ...filterCvParams,\n  };\n  const dst = cv.imread(docCanvas);\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n    } else {\n      dst.convertTo(dst, -1, 1, 60);\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const rotate = (cv: CV, docCanvas: HTMLCanvasElement, angle: 90 | 180 | 270) => {\n  const dst = cv.imread(docCanvas);\n  const ROT_LABELS = {\n    90: cv.ROTATE_90_CLOCKWISE,\n    180: cv.ROTATE_180,\n    270: cv.ROTATE_90_COUNTERCLOCKWISE,\n  };\n  if (ROT_LABELS[angle] !== undefined) {\n    cv.rotate(dst, dst, ROT_LABELS[angle]);\n    if (angle === 90 || angle === 270) {\n      const { width, height } = docCanvas;\n      docCanvas.width = height;\n      docCanvas.height = width;\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const mirror = (cv: CV, docCanvas: HTMLCanvasElement, horizontal: boolean) => {\n  const dst = cv.imread(docCanvas);\n  const flipCode = horizontal ? 1 : 0;\n  cv.flip(dst, dst, flipCode);\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n","import { OpenCvProvider } from 'opencv-react';\nimport React from 'react';\n\nimport type { ICropperRef } from '../lib/Canvas';\nimport Canvas from '../lib/Canvas';\nimport type { CropperRef } from '../types';\n\n// eslint-disable-next-line react/display-name\nconst Cropper = React.forwardRef<CropperRef, ICropperRef>((props, ref) => {\n  if (!props.image) {\n    return null;\n  }\n\n  return (\n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  );\n});\n\nexport default Cropper;\n"],"names":["buildCropPointVertexStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","cursor","buildCropPointEdgeStyle","flip","marginTop","undefined","marginLeft","CropPoint","_ref","cropPoints","pointArea","defaultPosition","pointSize","_ref$pointBgColor","_ref$pointBorder","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","_","_extends","x","y","React","Draggable","axis","style","includes","CropPoints","props","previewDims","otherProps","_objectWithoutPropertiesLoose","_excluded","Fragment","CropPointsDelimiters","_ref$lineWidth","lineWidth","_ref$lineColor","lineColor","_ref$displayGrid","displayGrid","canvas","useRef","clearCanvas","ctx","_canvas$current","current","getContext","alpha","willReadFrequently","clearRect","drawShape","leftTop","rightTop","rightBottom","leftBottom","left","top","right","bottom","_canvas$current2","strokeStyle","pointRadius","beginPath","moveTo","lineTo","closePath","stroke","useEffect","ref","calculateMidpoint","p1","p2","buildImgContainerStyle","imageResizeRatio","Canvas","image","onDragStop","onChange","cropperRef","_ref$pointSize","maxWidth","maxHeight","_useOpenCv","useOpenCv","cvLoaded","loaded","cv","canvasRef","previewCanvasRef","magnifierCanvasRef","_useState","useState","setPreviewDims","_useState2","setCropPoints","_useState3","loading","setLoading","_useState4","mode","setMode","setPreviewPaneDimensions","newPreviewDims","externalMaxWidth","externalMaxHeight","ratio","window","innerWidth","innerHeight","calculated","Math","round","calcDims","showPreview","imageMat","src","imread","dst","Mat","dsize","Size","resize","INTER_AREA","imshow","detectContours","ksize","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","left-top","right-top","right-bottom","left-bottom","useImperativeHandle","backToCrop","mirror","horizontal","docCanvas","rotate","angle","ROT_LABELS","90","ROTATE_90_CLOCKWISE","180","ROTATE_180","270","ROTATE_90_COUNTERCLOCKWISE","done","opts","Promise","resolve","reject","bR","bL","tR","tL","sourceCoordinates","map","point","max","destCoordinates","Ms","matFromArray","CV_32FC2","concat","apply","Md","_ref2","transformMatrix","getPerspectiveTransform","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","transform","filterCvParams","options","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","adaptiveThreshold","convertTo","applyFilter","preview","toBlob","blob","Error","File","type","e","clearMagnifier","magnCtx","file","reader","FileReader","onload","_event","result","onerror","err","readAsDataURL","then","location","parts","img","document","createElement","drawImage","match","protocol","hostname","port","crossOrigin","createCanvas","bootstrap","updateCropPoints","area","cp","dx","dy","prev","_magnifierCanvasRef$c","_extends2","offsetLeft","offsetTop","offsetWidth","offsetHeight","pointerEvents","Cropper","forwardRef","OpenCvProvider","openCvPath"],"mappings":"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"}