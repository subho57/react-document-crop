{"version":3,"file":"index.js","sources":["../src/lib/CropPoint.tsx","../src/lib/CropPoints.tsx","../src/lib/CropPointsDelimiters.tsx","../src/lib/Canvas.tsx","../src/lib/utils.ts","../src/lib/imgManipulation.ts","../src/components/Cropper.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport type { DraggableEventHandler } from 'react-draggable';\nimport Draggable from 'react-draggable';\n\nimport type { CropPoints, Point } from '../types';\n\nconst buildCropPointStyle = (size: number, pointBgColor: string, pointBorder: string) => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute' as const,\n  zIndex: 1001,\n});\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds,\n}: {\n  cropPoints: CropPoints;\n  pointArea: keyof CropPoints;\n  defaultPosition: Point;\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  onStop: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  onDrag: (position: Point, area: keyof CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}) => {\n  const onDrag: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea\n      );\n    },\n    [externalOnDrag]\n  );\n\n  const onStop: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag, cropPoints]\n  );\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2,\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div style={buildCropPointStyle(pointSize, pointBgColor, pointBorder)} />\n    </Draggable>\n  );\n};\n\nexport default CropPoint;\n","import React from 'react';\n\nimport type * as Types from '../types';\nimport CropPoint from './CropPoint';\n\ninterface ICropPointsProps {\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  cropPoints: Types.CropPoints;\n  previewDims: Types.PreviewDimensions;\n  onDrag: (position: Types.Point, area: keyof Types.CropPoints) => void;\n  onStop: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}\n\nconst CropPoints: React.FC<ICropPointsProps> = (props) => {\n  const { previewDims, ...otherProps } = props;\n  return (\n    <React.Fragment>\n      <CropPoint pointArea=\"left-top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-top\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint\n        pointArea=\"left-bottom\"\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height,\n        }}\n        {...otherProps}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default CropPoints;\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport type { CropPoints, Point, PreviewDimensions } from '../types';\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2',\n  pointSize,\n}: {\n  cropPoints: CropPoints;\n  previewDims: PreviewDimensions;\n  lineWidth?: number;\n  lineColor?: string;\n  pointSize: number;\n}) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    ctx?.clearRect(0, 0, previewDims.width, previewDims.height);\n  }, [canvas.current, previewDims]);\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom'];\n    return sortOrder.reduce((acc, pointPos) => [...acc, cropPoints[pointPos as keyof typeof cropPoints]], [] as Point[]);\n  }, [cropPoints]);\n\n  const drawShape = useCallback(\n    ([point1, point2, point3, point4]: Point[]) => {\n      const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n      if (!ctx) return;\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = lineColor;\n\n      ctx.beginPath();\n      ctx.moveTo(point1.x + pointSize / 2, point1.y);\n      ctx.lineTo(point2.x - pointSize / 2, point2.y);\n\n      ctx.moveTo(point2.x, point2.y + pointSize / 2);\n      ctx.lineTo(point3.x, point3.y - pointSize / 2);\n\n      ctx.moveTo(point3.x - pointSize / 2, point3.y);\n      ctx.lineTo(point4.x + pointSize / 2, point4.y);\n\n      ctx.moveTo(point4.x, point4.y - pointSize / 2);\n      ctx.lineTo(point1.x, point1.y + pointSize / 2);\n      ctx.closePath();\n      ctx.stroke();\n    },\n    [canvas.current]\n  );\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas();\n      const sortedPoints = sortPoints();\n      drawShape(sortedPoints);\n    }\n  }, [cropPoints, canvas.current]);\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  );\n};\n\nexport default CropPointsDelimiters;\n","/* eslint-disable no-param-reassign */\nimport type { Rect } from 'opencv-react';\nimport { useOpenCv } from 'opencv-react';\nimport React, { Fragment, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\n\nimport type * as Types from '../types';\nimport CropPoints from './CropPoints';\nimport CropPointsDelimiters from './CropPointsDelimiters';\nimport { applyFilter, transform } from './imgManipulation';\nimport { calcDims, isCrossOriginURL, readFile } from './utils';\n\nconst buildImgContainerStyle = (previewDims: Types.PreviewDimensions) => ({\n  width: previewDims.width,\n  height: previewDims.height,\n});\n\nlet imageResizeRatio = 1;\n\nexport interface ICropperRef {\n  image: File | string;\n  onDragStop?: (s: Types.CropperState) => void;\n  onChange?: (s: Types.CropperState) => void;\n  cropperRef?: React.ForwardedRef<Types.CropperRef>;\n  pointSize?: number;\n  lineWidth?: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  lineColor?: string;\n  maxWidth?: number;\n  maxHeight?: number;\n  openCvPath?: string;\n}\n\nconst Canvas: React.FC<ICropperRef> = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight,\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv();\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  const magnifierCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [previewDims, setPreviewDims] = useState<Types.PreviewDimensions>();\n  const [cropPoints, setCropPoints] = useState<Types.CropPoints>();\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState<'crop' | 'preview'>('crop');\n\n  const setPreviewPaneDimensions = () => {\n    if (!canvasRef.current) return;\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(canvasRef.current.width, canvasRef.current.height, maxWidth, maxHeight);\n    setPreviewDims(newPreviewDims);\n\n    if (!previewCanvasRef.current) return;\n    previewCanvasRef.current.width = newPreviewDims.width;\n    previewCanvasRef.current.height = newPreviewDims.height;\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width;\n  };\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop');\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve, reject) => {\n        setLoading(true);\n        if (!cv || !canvasRef.current || !cropPoints) {\n          reject(new Error('OpenCV not loaded or canvas not initialized'));\n          return;\n        }\n\n        transform(cv, canvasRef.current, cropPoints, imageResizeRatio, setPreviewPaneDimensions);\n        applyFilter(cv, canvasRef.current, opts.filterCvParams);\n        if (opts.preview) {\n          setMode('preview');\n        }\n        canvasRef.current.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create blob'));\n            } else {\n              resolve(blob);\n            }\n            setLoading(false);\n          },\n          image instanceof File ? image.type : 'image/png'\n        );\n      });\n    },\n  }));\n\n  const showPreview = () => {\n    if (!cv || !canvasRef.current || !previewCanvasRef.current) return;\n    const src = cv.imread(canvasRef.current);\n    const dst = new cv.Mat();\n    const dsize = new cv.Size(0, 0);\n    cv.resize(src, dst, dsize, imageResizeRatio, imageResizeRatio, cv.INTER_AREA);\n    cv.imshow(previewCanvasRef.current, dst);\n    src.delete();\n    dst.delete();\n  };\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview();\n    }\n  }, [mode]);\n\n  const createCanvas = async (src: string) => {\n    return new Promise<void>((resolve) => {\n      const img = document.createElement('img');\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas');\n        canvasRef.current.width = img.width;\n        canvasRef.current.height = img.height;\n        const ctx = canvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n        ctx?.drawImage(img, 0, 0);\n        setPreviewPaneDimensions();\n        resolve();\n      };\n      if (isCrossOriginURL(src)) img.crossOrigin = 'anonymous';\n      img.src = src;\n    });\n  };\n\n  const detectContours = () => {\n    if (!cv || !canvasRef.current) return;\n    const dst = cv.imread(canvasRef.current);\n    const ksize = new cv.Size(5, 5);\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n    cv.Canny(dst, dst, 75, 200);\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n    const contours = new cv.MatVector();\n    const hierarchy = new cv.Mat();\n    cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n    const rect = cv.boundingRect(dst);\n    dst.delete();\n    hierarchy.delete();\n    contours.delete();\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key as keyof Rect] *= imageResizeRatio;\n    });\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height,\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height },\n    };\n\n    setCropPoints(contourCoordinates);\n  };\n\n  const clearMagnifier = () => {\n    if (!magnifierCanvasRef.current) return;\n    const magnCtx = magnifierCanvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    magnCtx?.clearRect(0, 0, magnifierCanvasRef.current.width, magnifierCanvasRef.current.height);\n  };\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading });\n    }\n  }, [cropPoints, loading]);\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image);\n      if (!src) return;\n      await createCanvas(src);\n      showPreview();\n      detectContours();\n      setLoading(false);\n    };\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap();\n    } else {\n      setLoading(true);\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode]);\n\n  const onDrag = useCallback((position: Types.Point, area: keyof Types.CropPoints) => {\n    const { x, y } = position;\n\n    const magnCtx = magnifierCanvasRef.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    clearMagnifier();\n\n    if (!previewCanvasRef.current) return;\n\n    // TODO we should make those 5, 10 and 20 values proportionate\n    // to the point size\n    magnCtx?.drawImage(\n      previewCanvasRef.current,\n      x - (pointSize - 10),\n      y - (pointSize - 10),\n      pointSize + 5,\n      pointSize + 5,\n      x + 10,\n      y - 90,\n      pointSize + 20,\n      pointSize + 20\n    );\n\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } } as Types.CropPoints));\n  }, []);\n\n  const onStop = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } } as Types.CropPoints));\n    if (onDragStop) {\n      onDragStop({ ...cp, [area]: { x, y } });\n    }\n  }, []);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims)),\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && previewCanvasRef.current && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef.current.offsetLeft - pointSize / 2,\n              top: previewCanvasRef.current.offsetTop - pointSize / 2,\n              right: previewCanvasRef.current.offsetLeft - pointSize / 2 + previewCanvasRef.current.offsetWidth,\n              bottom: previewCanvasRef.current.offsetTop - pointSize / 2 + previewCanvasRef.current.offsetHeight,\n            }}\n          />\n          <CropPointsDelimiters\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none',\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas style={{ zIndex: 5, pointerEvents: 'none' }} ref={previewCanvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","export const readFile = (file: File | string): Promise<string | null> => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (_event) => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = (err) => {\n        reject(err);\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file);\n  }\n  return Promise.resolve(null);\n};\n\nexport const calcDims = (width: number, height: number, externalMaxWidth?: number, externalMaxHeight?: number) => {\n  const ratio = width / height;\n\n  const maxWidth = externalMaxWidth || window.innerWidth;\n  const maxHeight = externalMaxHeight || window.innerHeight;\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio,\n  };\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight;\n    calculated.width = Math.round(maxHeight * ratio);\n  }\n  return calculated;\n};\n\nexport function isCrossOriginURL(url: string) {\n  const { location } = window;\n  const parts = url.match(/^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i);\n\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n","import type { CV } from 'opencv-react';\n\nimport type { CropPoints, OpenCVFilterProps } from '../types';\n\nexport const transform = (\n  cv: CV,\n  docCanvas: HTMLCanvasElement,\n  cropPoints: CropPoints,\n  imageResizeRatio: number,\n  setPreviewPaneDimensions: () => void\n) => {\n  const dst = cv.imread(docCanvas);\n\n  const bR = cropPoints['right-bottom'];\n  const bL = cropPoints['left-bottom'];\n  const tR = cropPoints['right-top'];\n  const tL = cropPoints['left-top'];\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [point.x / imageResizeRatio, point.y / imageResizeRatio]);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio;\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio;\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1],\n  ];\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...sourceCoordinates));\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...destCoordinates));\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight);\n  // perform warp\n  cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n  cv.imshow(docCanvas, dst);\n\n  dst.delete();\n  Ms.delete();\n  Md.delete();\n  transformMatrix.delete();\n\n  setPreviewPaneDimensions();\n};\n\nexport const applyFilter = async (cv: CV, docCanvas: HTMLCanvasElement, filterCvParams?: Partial<OpenCVFilterProps>) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true,\n    ...filterCvParams,\n  };\n  const dst = cv.imread(docCanvas);\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n    } else {\n      dst.convertTo(dst, -1, 1, 60);\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n    }\n  }\n  cv.imshow(docCanvas, dst);\n};\n","import { OpenCvProvider } from 'opencv-react';\nimport React from 'react';\n\nimport type { ICropperRef } from '../lib/Canvas';\nimport Canvas from '../lib/Canvas';\nimport type { CropperRef } from '../types';\n\n// eslint-disable-next-line react/display-name\nconst Cropper = React.forwardRef<CropperRef, ICropperRef>((props, ref) => {\n  if (!props.image) {\n    return null;\n  }\n\n  return (\n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  );\n});\n\nexport default Cropper;\n"],"names":["buildCropPointStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","CropPoint","_ref","cropPoints","pointArea","defaultPosition","pointSize","_ref$pointBgColor","_ref$pointBorder","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","_","_extends","x","y","React","Draggable","style","CropPoints","props","previewDims","otherProps","_objectWithoutPropertiesLoose","_excluded","Fragment","CropPointsDelimiters","_ref$lineWidth","lineWidth","_ref$lineColor","lineColor","canvas","useRef","clearCanvas","ctx","_canvas$current","current","getContext","alpha","willReadFrequently","clearRect","sortPoints","reduce","acc","pointPos","concat","drawShape","_ref2","point1","point2","point3","point4","_canvas$current2","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","useEffect","sortedPoints","ref","buildImgContainerStyle","imageResizeRatio","Canvas","image","onDragStop","onChange","cropperRef","_ref$pointSize","maxWidth","maxHeight","_useOpenCv","useOpenCv","cvLoaded","loaded","cv","canvasRef","previewCanvasRef","magnifierCanvasRef","_useState","useState","setPreviewDims","_useState2","setCropPoints","_useState3","loading","setLoading","_useState4","mode","setMode","setPreviewPaneDimensions","newPreviewDims","externalMaxWidth","externalMaxHeight","ratio","window","innerWidth","innerHeight","calculated","Math","round","calcDims","useImperativeHandle","backToCrop","done","opts","Promise","resolve","reject","docCanvas","dst","imread","bR","bL","tR","tL","sourceCoordinates","map","point","max","destCoordinates","Ms","matFromArray","CV_32FC2","apply","Md","transformMatrix","getPerspectiveTransform","dsize","Size","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","imshow","transform","filterCvParams","options","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","cvtColor","COLOR_RGBA2GRAY","ksize","GaussianBlur","BORDER_DEFAULT","adaptiveThreshold","THRESH_BINARY","convertTo","threshold","e","applyFilter","preview","toBlob","blob","Error","File","type","showPreview","src","Mat","resize","INTER_AREA","clearMagnifier","magnCtx","file","reader","FileReader","onload","_event","result","onerror","err","readAsDataURL","then","location","parts","img","document","createElement","drawImage","match","protocol","hostname","port","crossOrigin","createCanvas","Canny","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","left-top","right-top","right-bottom","left-bottom","detectContours","bootstrap","area","_magnifierCanvasRef$c","cPs","_extends2","cp","_extends4","_extends3","left","offsetLeft","top","offsetTop","right","offsetWidth","bottom","offsetHeight","pointerEvents","Cropper","forwardRef","OpenCvProvider","openCvPath"],"mappings":"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"}