{"version":3,"file":"index.modern.js","sources":["../src/lib/CropPoint.tsx","../src/lib/CropPoints.tsx","../src/lib/CropPointsDelimiters.tsx","../src/lib/utils.ts","../src/lib/Canvas.tsx","../src/lib/imgManipulation.ts","../src/components/Cropper.tsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, { useCallback } from 'react';\nimport type { DraggableEventHandler } from 'react-draggable';\nimport Draggable from 'react-draggable';\n\nimport type { CropPoints, Point } from '../types';\n\nconst buildCropPointVertexStyle = (size: number, pointBgColor: string, pointBorder: string): React.CSSProperties => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst buildCropPointEdgeStyle = (size: number, pointBgColor: string, pointBorder: string, flip: boolean): React.CSSProperties => ({\n  width: flip ? size / 2 : size,\n  height: flip ? size : size / 2,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  marginTop: flip ? undefined : size / 4,\n  marginLeft: flip ? size / 4 : undefined,\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor,\n  pointBorder,\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds,\n}: {\n  cropPoints: CropPoints;\n  pointArea: keyof CropPoints;\n  defaultPosition: Point;\n  pointSize: number;\n  pointBgColor: string;\n  pointBorder: string;\n  onStop: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  onDrag: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}) => {\n  const onDrag: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag]\n  );\n\n  const onStop: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag, cropPoints]\n  );\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2,\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n      axis={pointArea === 'top' || pointArea === 'bottom' ? 'y' : pointArea === 'left' || pointArea === 'right' ? 'x' : 'both'}\n    >\n      <div\n        style={\n          ['top', 'bottom', 'left', 'right'].includes(pointArea)\n            ? buildCropPointEdgeStyle(pointSize, pointBgColor, pointBorder, pointArea === 'left' || pointArea === 'right')\n            : buildCropPointVertexStyle(pointSize, pointBgColor, pointBorder)\n        }\n      />\n    </Draggable>\n  );\n};\n\nexport default CropPoint;\n","import React from 'react';\n\nimport type * as Types from '../types';\nimport CropPoint from './CropPoint';\n\ninterface ICropPointsProps {\n  pointSize: number;\n  pointBgColor: string;\n  pointBorder: string;\n  cropPoints: Types.CropPoints;\n  previewDims: Types.PreviewDimensions;\n  onDrag: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  onStop: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}\n\nconst CropPoints: React.FC<ICropPointsProps> = (props) => {\n  const { previewDims, ...otherProps } = props;\n  return (\n    <React.Fragment>\n      <CropPoint pointArea=\"top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left\" defaultPosition={{ x: previewDims.width, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left-top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-top\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint\n        pointArea=\"left-bottom\"\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height,\n        }}\n        {...otherProps}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default CropPoints;\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport type { CropPoints, PreviewDimensions } from '../types';\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth,\n  lineColor,\n  pointSize,\n}: {\n  cropPoints: CropPoints;\n  previewDims: PreviewDimensions;\n  lineWidth: number;\n  lineColor: string;\n  pointSize: number;\n  displayGrid?: boolean;\n}) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    ctx?.clearRect(0, 0, previewDims.width, previewDims.height);\n  }, [canvas.current, previewDims]);\n\n  const drawShape = useCallback(() => {\n    const {\n      'left-top': leftTop,\n      'right-top': rightTop,\n      'right-bottom': rightBottom,\n      'left-bottom': leftBottom,\n      left,\n      top,\n      right,\n      bottom,\n    } = cropPoints;\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    if (!ctx) return;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    const pointRadius = pointSize / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(leftTop.x + pointRadius, leftTop.y);\n    ctx.lineTo(rightTop.x - pointRadius, rightTop.y);\n\n    ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n    ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n    ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n    ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n\n    ctx.moveTo(leftBottom.x, leftBottom.y - pointRadius);\n    ctx.lineTo(leftTop.x, leftTop.y + pointRadius);\n\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.clearRect(top.x - pointRadius, top.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(right.x - pointRadius, right.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(bottom.x - pointRadius, bottom.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(left.x - pointRadius, left.y - pointRadius, pointSize, pointSize);\n\n    // if (displayGrid) {\n    //   ctx.lineWidth = lineWidth / 2;\n\n    //   ctx.beginPath();\n    //   ctx.moveTo(leftTop.x - pointRadius, leftTop.y);\n    //   ctx.lineTo(leftTop.x + pointRadius, leftTop.y);\n    //   ctx.moveTo(leftTop.x, leftTop.y + pointRadius);\n    //   ctx.lineTo(leftTop.x, leftTop.y - pointRadius);\n\n    //   ctx.moveTo(rightTop.x - pointRadius, rightTop.y);\n    //   ctx.lineTo(rightTop.x + pointRadius, rightTop.y);\n    //   ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n    //   ctx.lineTo(rightTop.x, rightTop.y - pointRadius);\n\n    //   ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n    //   ctx.lineTo(rightBottom.x + pointRadius, rightBottom.y);\n    //   ctx.moveTo(rightBottom.x, rightBottom.y + pointRadius);\n    //   ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n    //   ctx.moveTo(leftBottom.x - pointRadius, leftBottom.y);\n    //   ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n    //   ctx.moveTo(leftBottom.x, leftBottom.y + pointRadius);\n    //   ctx.lineTo(leftBottom.x, leftBottom.y - pointRadius);\n\n    //   ctx.closePath();\n    //   ctx.stroke();\n    // }\n  }, [cropPoints, canvas.current]);\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas();\n      drawShape();\n    }\n  }, [cropPoints, canvas.current]);\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  );\n};\n\nexport default CropPointsDelimiters;\n","import type { Point } from '../types';\n\nexport const readFile = (file: File | string): Promise<string | null> => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (_event) => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = (err) => {\n        reject(err);\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file);\n  }\n  return Promise.resolve(null);\n};\n\nexport const calcDims = (width: number, height: number, externalMaxWidth?: number, externalMaxHeight?: number) => {\n  const ratio = width / height;\n\n  const maxWidth = externalMaxWidth || window.innerWidth;\n  const maxHeight = externalMaxHeight || window.innerHeight;\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio,\n  };\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight;\n    calculated.width = Math.round(maxHeight * ratio);\n  }\n  return calculated;\n};\n\nexport function isCrossOriginURL(url: string) {\n  const { location } = window;\n  const parts = url.match(/^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i);\n\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n\nexport function calculateMidpoint(p1: Point, p2: Point) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable no-param-reassign */\nimport type { Mat, Rect } from 'opencv-react-ts';\nimport { useOpenCv } from 'opencv-react-ts';\nimport React, { Fragment, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\n\nimport type * as Types from '../types';\nimport CropPoints from './CropPoints';\nimport CropPointsDelimiters from './CropPointsDelimiters';\nimport { applyFilter, mirror, rotate, transform } from './imgManipulation';\nimport { calcDims, calculateMidpoint, isCrossOriginURL, readFile } from './utils';\n\nconst buildImgContainerStyle = (previewDims: Types.PreviewDimensions) => ({\n  width: previewDims.width,\n  height: previewDims.height,\n});\n\nlet imageResizeRatio = 0;\n\nexport interface ICropperRef {\n  image: File | string;\n  onDragStop?: (s: Types.CropperState) => void;\n  onChange?: (s: Types.CropperState) => void;\n  cropperRef?: React.ForwardedRef<Types.CropperRef>;\n  pointSize?: number;\n  lineWidth?: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  lineColor?: string;\n  maxWidth?: number;\n  maxHeight?: number;\n  displayGrid?: boolean;\n  openCvPath?: string;\n  magnification?: number;\n  autoCrop?: boolean;\n  offset?: { x: number; y: number };\n}\n\nconst Canvas: React.FC<ICropperRef> = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  maxWidth,\n  maxHeight,\n  lineWidth = 3,\n  pointSize = 30,\n  magnification = 3,\n  displayGrid = true,\n  autoCrop = true,\n  lineColor = '#3cabe2',\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  offset = { x: 60, y: 60 },\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv();\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  const magnifierCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [previewDims, setPreviewDims] = useState<Types.PreviewDimensions>();\n  const [cropPoints, setCropPoints] = useState<Types.CropPoints>();\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState<'crop' | 'preview'>('crop');\n\n  const setPreviewPaneDimensions = () => {\n    if (!canvasRef.current) return;\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(canvasRef.current.width, canvasRef.current.height, maxWidth, maxHeight);\n    setPreviewDims(newPreviewDims);\n\n    if (!previewCanvasRef.current) return;\n    previewCanvasRef.current.width = newPreviewDims.width;\n    previewCanvasRef.current.height = newPreviewDims.height;\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width;\n  };\n\n  const showPreview = (imageMat?: Mat) => {\n    if (!cv || !canvasRef.current || !previewCanvasRef.current) return;\n    const src = imageMat || cv.imread(canvasRef.current);\n    const dst = new cv.Mat();\n    const dsize = new cv.Size(0, 0);\n    cv.resize(src, dst, dsize, imageResizeRatio, imageResizeRatio, cv.INTER_AREA);\n    cv.imshow(previewCanvasRef.current, dst);\n    src.delete();\n    dst.delete();\n  };\n\n  const initializeCoordinates = (detectContours = autoCrop) => {\n    if (!cv || !canvasRef.current) return;\n    const dst = cv.imread(canvasRef.current);\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n    if (detectContours) {\n      const ksize = new cv.Size(5, 5);\n      cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n      cv.Canny(dst, dst, 75, 200);\n      // find contours\n      cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n      const contours = new cv.MatVector();\n      const hierarchy = new cv.Mat();\n      cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n      hierarchy.delete();\n      contours.delete();\n    }\n    const rect = cv.boundingRect(dst);\n    dst.delete();\n\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key as keyof Rect] *= imageResizeRatio;\n    });\n\n    const contourCoordinates: Types.CropPoints = {\n      top: { x: rect.x + rect.width / 2, y: rect.y },\n      bottom: { x: rect.x + rect.width / 2, y: rect.y + rect.height },\n      left: { x: rect.x, y: rect.y + rect.height / 2 },\n      right: { x: rect.x + rect.width, y: rect.y + rect.height / 2 },\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height,\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height },\n    };\n\n    setCropPoints(contourCoordinates);\n  };\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop');\n    },\n    mirror: (horizontal: boolean) => {\n      if (!cv || !canvasRef.current) return;\n      mirror(cv, canvasRef.current, horizontal);\n      setPreviewPaneDimensions();\n      showPreview();\n      initializeCoordinates();\n    },\n    rotate: (angle: 90 | 180 | 270) => {\n      if (!cv || !canvasRef.current) return;\n      rotate(cv, canvasRef.current, angle);\n      setPreviewPaneDimensions();\n      showPreview();\n      initializeCoordinates();\n    },\n    reset: () => {\n      if (!cv || !canvasRef.current) return;\n      setPreviewPaneDimensions();\n      showPreview();\n      initializeCoordinates(false);\n    },\n    done: async (opts = {}) => {\n      return new Promise<Blob>((resolve, reject) => {\n        setLoading(true);\n        if (!cv || !canvasRef.current || !cropPoints) {\n          reject(new Error('OpenCV not loaded or canvas not initialized'));\n          return;\n        }\n\n        transform(cv, canvasRef.current, cropPoints, imageResizeRatio, setPreviewPaneDimensions);\n        applyFilter(cv, canvasRef.current, opts.filterCvParams);\n        if (opts.preview) {\n          setMode('preview');\n        }\n        canvasRef.current.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create blob'));\n            } else {\n              resolve(blob);\n            }\n            setLoading(false);\n          },\n          image instanceof File ? image.type : 'image/png'\n        );\n      });\n    },\n  }));\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview();\n    }\n  }, [mode]);\n\n  const createCanvas = async (src: string) => {\n    return new Promise<void>((resolve) => {\n      const img = document.createElement('img');\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas');\n        canvasRef.current.width = img.width;\n        canvasRef.current.height = img.height;\n        const ctx = canvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n        ctx?.drawImage(img, 0, 0);\n        setPreviewPaneDimensions();\n        resolve();\n      };\n      if (isCrossOriginURL(src)) img.crossOrigin = 'anonymous';\n      img.src = src;\n    });\n  };\n\n  const clearMagnifier = () => {\n    if (!magnifierCanvasRef.current) return;\n    const magnCtx = magnifierCanvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    magnCtx?.clearRect(0, 0, magnifierCanvasRef.current.width, magnifierCanvasRef.current.height);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onChange?.({ ...cropPoints!, loading });\n  }, [cropPoints, loading]);\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image);\n      if (!src) return;\n      await createCanvas(src);\n      showPreview();\n      initializeCoordinates();\n      setLoading(false);\n    };\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap();\n    } else {\n      setLoading(true);\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode]);\n\n  const updateCropPoints = (position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n\n    if (area.includes('-')) {\n      cp[area] = { x, y };\n      if (area.includes('left')) {\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n      }\n      if (area.includes('right')) {\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n      if (area.includes('top')) {\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n      }\n      if (area.includes('bottom')) {\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      }\n    } else {\n      const dx = x - cp[area].x;\n      const dy = y - cp[area].y;\n      if (area === 'left') {\n        cp['left-top'] = { x, y: cp['left-top'].y + dy };\n        cp['left-bottom'] = { x, y: cp['left-bottom'].y + dy };\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'right') {\n        cp['right-top'] = { x, y: cp['right-top'].y + dy };\n        cp['right-bottom'] = { x, y: cp['right-bottom'].y + dy };\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'top') {\n        cp['left-top'] = { x: cp['left-top'].x + dx, y };\n        cp['right-top'] = { x: cp['right-top'].x + dx, y };\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      } else if (area === 'bottom') {\n        cp['left-bottom'] = { x: cp['left-bottom'].x + dx, y };\n        cp['right-bottom'] = { x: cp['right-bottom'].x + dx, y };\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n    }\n    setCropPoints((prev) => ({ ...prev, ...cp } as Types.CropPoints));\n  };\n\n  const onDrag = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n\n    // Display the magnifier only when the user is dragging the vertices.\n    if (area.includes('-')) {\n      const magnCtx = magnifierCanvasRef.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n      if (!magnCtx) return;\n      magnCtx.lineWidth = lineWidth * 1.5;\n      magnCtx.strokeStyle = lineColor;\n\n      if (!previewCanvasRef.current) return;\n      const pointRadius = pointSize / 2;\n\n      const localOffset = { ...offset };\n\n      if (area === 'left-top') {\n        localOffset.x = +localOffset.x;\n        localOffset.y = +localOffset.y;\n      } else if (area === 'right-top') {\n        localOffset.x = -localOffset.x;\n        localOffset.y = +localOffset.y;\n      } else if (area === 'left-bottom') {\n        localOffset.x = +localOffset.x;\n        localOffset.y = -localOffset.y;\n      } else if (area === 'right-bottom') {\n        localOffset.x = -localOffset.x;\n        localOffset.y = -localOffset.y;\n      }\n\n      magnCtx.save();\n      magnCtx.beginPath();\n      magnCtx.arc(x + localOffset.x, y + localOffset.y, pointRadius * magnification, 0, 2 * Math.PI);\n      magnCtx.closePath();\n      magnCtx.stroke();\n      magnCtx.clip();\n\n      magnCtx.drawImage(\n        previewCanvasRef.current,\n        x - pointRadius,\n        y - pointRadius,\n        pointSize,\n        pointSize,\n        x + localOffset.x - pointRadius * magnification,\n        y + localOffset.y - pointRadius * magnification,\n        pointSize * magnification,\n        pointSize * magnification\n      );\n\n      magnCtx.beginPath();\n      magnCtx.arc(0, 0, pointRadius * magnification, 0, Math.PI * 2, true);\n      magnCtx.clip();\n      magnCtx.closePath();\n      magnCtx.restore();\n\n      if (displayGrid) {\n        magnCtx.beginPath();\n        magnCtx.lineWidth = lineWidth;\n        magnCtx.moveTo(x + localOffset.x - pointRadius * magnification, y + localOffset.y);\n        magnCtx.lineTo(x + localOffset.x + pointRadius * magnification, y + localOffset.y);\n        magnCtx.moveTo(x + localOffset.x, y + localOffset.y - pointRadius * magnification);\n        magnCtx.lineTo(x + localOffset.x, y + localOffset.y + pointRadius * magnification);\n        magnCtx.closePath();\n        magnCtx.stroke();\n      }\n    }\n    updateCropPoints(position, area, cp);\n  }, []);\n\n  const onStop = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n    updateCropPoints(position, area, cp);\n    onDragStop?.({ ...cp, [area]: { x, y } });\n  }, []);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims)),\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && previewCanvasRef.current && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef.current.offsetLeft - pointSize / 2,\n              top: previewCanvasRef.current.offsetTop - pointSize / 2,\n              right: previewCanvasRef.current.offsetLeft - pointSize / 2 + previewCanvasRef.current.offsetWidth,\n              bottom: previewCanvasRef.current.offsetTop - pointSize / 2 + previewCanvasRef.current.offsetHeight,\n            }}\n          />\n          <CropPointsDelimiters\n            displayGrid={displayGrid}\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 1002,\n              pointerEvents: 'none',\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas style={{ zIndex: 5, pointerEvents: 'none' }} ref={previewCanvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","/* eslint-disable no-param-reassign */\nimport type { CV } from 'opencv-react-ts';\n\nimport type { CropPoints, OpenCVFilterProps } from '../types';\n\nexport const transform = (\n  cv: CV,\n  docCanvas: HTMLCanvasElement,\n  cropPoints: CropPoints,\n  imageResizeRatio: number,\n  setPreviewPaneDimensions: () => void\n) => {\n  const dst = cv.imread(docCanvas);\n\n  const bR = cropPoints['right-bottom'];\n  const bL = cropPoints['left-bottom'];\n  const tR = cropPoints['right-top'];\n  const tL = cropPoints['left-top'];\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [point.x / imageResizeRatio, point.y / imageResizeRatio]);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio;\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio;\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1],\n  ];\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...sourceCoordinates));\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...destCoordinates));\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight);\n  // perform warp\n  cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n  cv.imshow(docCanvas, dst);\n\n  dst.delete();\n  Ms.delete();\n  Md.delete();\n  transformMatrix.delete();\n\n  setPreviewPaneDimensions();\n};\n\nexport const applyFilter = (cv: CV, docCanvas: HTMLCanvasElement, filterCvParams?: Partial<OpenCVFilterProps>) => {\n  // default options\n  const options = {\n    blur: false,\n    th: false,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: false,\n    ...filterCvParams,\n  };\n  const dst = cv.imread(docCanvas);\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n    } else {\n      dst.convertTo(dst, -1, 1, 60);\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const rotate = (cv: CV, docCanvas: HTMLCanvasElement, angle: 90 | 180 | 270) => {\n  const dst = cv.imread(docCanvas);\n  const ROT_LABELS = {\n    90: cv.ROTATE_90_CLOCKWISE,\n    180: cv.ROTATE_180,\n    270: cv.ROTATE_90_COUNTERCLOCKWISE,\n  };\n  if (ROT_LABELS[angle] !== undefined) {\n    cv.rotate(dst, dst, ROT_LABELS[angle]);\n    if (angle === 90 || angle === 270) {\n      const { width, height } = docCanvas;\n      docCanvas.width = height;\n      docCanvas.height = width;\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const mirror = (cv: CV, docCanvas: HTMLCanvasElement, horizontal: boolean) => {\n  const dst = cv.imread(docCanvas);\n  const flipCode = horizontal ? 1 : 0;\n  cv.flip(dst, dst, flipCode);\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n","import { OpenCvProvider } from 'opencv-react-ts';\nimport React from 'react';\n\nimport type { ICropperRef } from '../lib/Canvas';\nimport Canvas from '../lib/Canvas';\nimport type { CropperRef } from '../types';\n\n// eslint-disable-next-line react/display-name\nconst Cropper = React.forwardRef<CropperRef, ICropperRef>((props, ref) => {\n  if (!props.image) {\n    return null;\n  }\n\n  return (\n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  );\n});\n\nexport default Cropper;\n"],"names":["buildCropPointVertexStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","cursor","buildCropPointEdgeStyle","flip","marginTop","undefined","marginLeft","CropPoint","_ref","cropPoints","pointArea","defaultPosition","pointSize","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","_","_extends","x","y","React","Draggable","axis","style","includes","CropPoints","props","previewDims","otherProps","_objectWithoutPropertiesLoose","_excluded","Fragment","CropPointsDelimiters","lineWidth","lineColor","canvas","useRef","clearCanvas","ctx","_canvas$current","current","getContext","alpha","willReadFrequently","clearRect","drawShape","leftTop","rightTop","rightBottom","leftBottom","left","top","right","bottom","_canvas$current2","strokeStyle","pointRadius","beginPath","moveTo","lineTo","closePath","stroke","useEffect","ref","calculateMidpoint","p1","p2","buildImgContainerStyle","imageResizeRatio","Canvas","image","onDragStop","onChange","cropperRef","maxWidth","maxHeight","_ref$lineWidth","_ref$pointSize","_ref$magnification","magnification","_ref$displayGrid","displayGrid","_ref$autoCrop","autoCrop","_ref$lineColor","_ref$pointBgColor","_ref$pointBorder","_ref$offset","offset","_useOpenCv","useOpenCv","cvLoaded","loaded","cv","canvasRef","previewCanvasRef","magnifierCanvasRef","_useState","useState","setPreviewDims","_useState2","setCropPoints","_useState3","loading","setLoading","_useState4","mode","setMode","setPreviewPaneDimensions","newPreviewDims","externalMaxWidth","externalMaxHeight","ratio","window","innerWidth","innerHeight","calculated","Math","round","calcDims","showPreview","imageMat","src","imread","dst","Mat","dsize","Size","resize","INTER_AREA","imshow","initializeCoordinates","detectContours","cvtColor","COLOR_RGBA2GRAY","ksize","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","left-top","right-top","right-bottom","left-bottom","useImperativeHandle","backToCrop","mirror","horizontal","docCanvas","rotate","angle","ROT_LABELS","90","ROTATE_90_CLOCKWISE","180","ROTATE_180","270","ROTATE_90_COUNTERCLOCKWISE","reset","done","opts","Promise","resolve","reject","bR","bL","tR","tL","sourceCoordinates","map","point","max","destCoordinates","Ms","matFromArray","CV_32FC2","concat","apply","Md","_ref2","transformMatrix","getPerspectiveTransform","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","transform","filterCvParams","options","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","adaptiveThreshold","convertTo","applyFilter","preview","toBlob","blob","Error","File","type","e","clearMagnifier","magnCtx","file","reader","FileReader","onload","_event","result","onerror","err","readAsDataURL","then","location","parts","img","document","createElement","drawImage","match","protocol","hostname","port","crossOrigin","createCanvas","bootstrap","updateCropPoints","area","cp","dx","dy","prev","_magnifierCanvasRef$c","localOffset","save","arc","PI","clip","restore","_extends2","offsetLeft","offsetTop","offsetWidth","offsetHeight","pointerEvents","Cropper","forwardRef","OpenCvProvider","openCvPath"],"mappings":"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"}