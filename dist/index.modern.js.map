{"version":3,"file":"index.modern.js","sources":["../src/lib/CropPoint.tsx","../src/lib/CropPoints.tsx","../src/lib/CropPointsDelimiters.tsx","../src/lib/utils.ts","../src/lib/Canvas.tsx","../src/lib/imgManipulation.ts","../src/components/Cropper.tsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, { useCallback } from 'react';\nimport type { DraggableEventHandler } from 'react-draggable';\nimport Draggable from 'react-draggable';\n\nimport type { CropPoints, Point } from '../types';\n\nconst buildCropPointVertexStyle = (size: number, pointBgColor: string, pointBorder: string): React.CSSProperties => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst buildCropPointEdgeStyle = (size: number, pointBgColor: string, pointBorder: string, flip: boolean): React.CSSProperties => ({\n  width: flip ? size / 2 : size,\n  height: flip ? size : size / 2,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  marginTop: flip ? undefined : size / 4,\n  marginLeft: flip ? size / 4 : undefined,\n  position: 'absolute' as const,\n  zIndex: 1001,\n  cursor: 'pointer',\n});\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds,\n}: {\n  cropPoints: CropPoints;\n  pointArea: keyof CropPoints;\n  defaultPosition: Point;\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  onStop: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  onDrag: (position: Point, area: keyof CropPoints, cropPoints: CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}) => {\n  const onDrag: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag]\n  );\n\n  const onStop: DraggableEventHandler = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2,\n        },\n        pointArea,\n        cropPoints\n      );\n    },\n    [externalOnDrag, cropPoints]\n  );\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2,\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n      axis={pointArea === 'top' || pointArea === 'bottom' ? 'y' : pointArea === 'left' || pointArea === 'right' ? 'x' : 'both'}\n    >\n      <div\n        style={\n          ['top', 'bottom', 'left', 'right'].includes(pointArea)\n            ? buildCropPointEdgeStyle(pointSize, pointBgColor, pointBorder, pointArea === 'left' || pointArea === 'right')\n            : buildCropPointVertexStyle(pointSize, pointBgColor, pointBorder)\n        }\n      />\n    </Draggable>\n  );\n};\n\nexport default CropPoint;\n","import React from 'react';\n\nimport type * as Types from '../types';\nimport CropPoint from './CropPoint';\n\ninterface ICropPointsProps {\n  pointSize: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  cropPoints: Types.CropPoints;\n  previewDims: Types.PreviewDimensions;\n  onDrag: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  onStop: (position: Types.Point, area: keyof Types.CropPoints, cropPoints: Types.CropPoints) => void;\n  bounds: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}\n\nconst CropPoints: React.FC<ICropPointsProps> = (props) => {\n  const { previewDims, ...otherProps } = props;\n  return (\n    <React.Fragment>\n      <CropPoint pointArea=\"top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left\" defaultPosition={{ x: previewDims.width, y: previewDims.height }} {...otherProps} />\n      <CropPoint pointArea=\"left-top\" defaultPosition={{ x: 0, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-top\" defaultPosition={{ x: previewDims.width, y: 0 }} {...otherProps} />\n      <CropPoint pointArea=\"right-bottom\" defaultPosition={{ x: 0, y: previewDims.height }} {...otherProps} />\n      <CropPoint\n        pointArea=\"left-bottom\"\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height,\n        }}\n        {...otherProps}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default CropPoints;\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport type { CropPoints, PreviewDimensions } from '../types';\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2',\n  pointSize,\n  displayGrid = true,\n}: {\n  cropPoints: CropPoints;\n  previewDims: PreviewDimensions;\n  lineWidth?: number;\n  lineColor?: string;\n  pointSize: number;\n  displayGrid?: boolean;\n}) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    ctx?.clearRect(0, 0, previewDims.width, previewDims.height);\n  }, [canvas.current, previewDims]);\n\n  const drawShape = useCallback(() => {\n    const {\n      'left-top': leftTop,\n      'right-top': rightTop,\n      'right-bottom': rightBottom,\n      'left-bottom': leftBottom,\n      left,\n      top,\n      right,\n      bottom,\n    } = cropPoints;\n    const ctx = canvas.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    if (!ctx) return;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    const pointRadius = pointSize / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(leftTop.x + pointRadius, leftTop.y);\n    ctx.lineTo(rightTop.x - pointRadius, rightTop.y);\n\n    ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n    ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n    ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n    ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n\n    ctx.moveTo(leftBottom.x, leftBottom.y - pointRadius);\n    ctx.lineTo(leftTop.x, leftTop.y + pointRadius);\n\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.clearRect(top.x - pointRadius, top.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(right.x - pointRadius, right.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(bottom.x - pointRadius, bottom.y - pointRadius, pointSize, pointSize);\n    ctx.clearRect(left.x - pointRadius, left.y - pointRadius, pointSize, pointSize);\n\n    if (displayGrid) {\n      ctx.lineWidth = lineWidth / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(leftTop.x - pointRadius, leftTop.y);\n      ctx.lineTo(leftTop.x + pointRadius, leftTop.y);\n      ctx.moveTo(leftTop.x, leftTop.y + pointRadius);\n      ctx.lineTo(leftTop.x, leftTop.y - pointRadius);\n\n      ctx.moveTo(rightTop.x - pointRadius, rightTop.y);\n      ctx.lineTo(rightTop.x + pointRadius, rightTop.y);\n      ctx.moveTo(rightTop.x, rightTop.y + pointRadius);\n      ctx.lineTo(rightTop.x, rightTop.y - pointRadius);\n\n      ctx.moveTo(rightBottom.x - pointRadius, rightBottom.y);\n      ctx.lineTo(rightBottom.x + pointRadius, rightBottom.y);\n      ctx.moveTo(rightBottom.x, rightBottom.y + pointRadius);\n      ctx.lineTo(rightBottom.x, rightBottom.y - pointRadius);\n\n      ctx.moveTo(leftBottom.x - pointRadius, leftBottom.y);\n      ctx.lineTo(leftBottom.x + pointRadius, leftBottom.y);\n      ctx.moveTo(leftBottom.x, leftBottom.y + pointRadius);\n      ctx.lineTo(leftBottom.x, leftBottom.y - pointRadius);\n\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }, [cropPoints, canvas.current]);\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas();\n      drawShape();\n    }\n  }, [cropPoints, canvas.current]);\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  );\n};\n\nexport default CropPointsDelimiters;\n","import type { Point } from '../types';\n\nexport const readFile = (file: File | string): Promise<string | null> => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (_event) => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = (err) => {\n        reject(err);\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file);\n  }\n  return Promise.resolve(null);\n};\n\nexport const calcDims = (width: number, height: number, externalMaxWidth?: number, externalMaxHeight?: number) => {\n  const ratio = width / height;\n\n  const maxWidth = externalMaxWidth || window.innerWidth;\n  const maxHeight = externalMaxHeight || window.innerHeight;\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio,\n  };\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight;\n    calculated.width = Math.round(maxHeight * ratio);\n  }\n  return calculated;\n};\n\nexport function isCrossOriginURL(url: string) {\n  const { location } = window;\n  const parts = url.match(/^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i);\n\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n\nexport function calculateMidpoint(p1: Point, p2: Point) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable no-param-reassign */\nimport type { Mat, Rect } from 'opencv-react';\nimport { useOpenCv } from 'opencv-react';\nimport React, { Fragment, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\n\nimport type * as Types from '../types';\nimport CropPoints from './CropPoints';\nimport CropPointsDelimiters from './CropPointsDelimiters';\nimport { applyFilter, mirror, rotate, transform } from './imgManipulation';\nimport { calcDims, calculateMidpoint, isCrossOriginURL, readFile } from './utils';\n\nconst buildImgContainerStyle = (previewDims: Types.PreviewDimensions) => ({\n  width: previewDims.width,\n  height: previewDims.height,\n});\n\nlet imageResizeRatio = 0;\n\nexport interface ICropperRef {\n  image: File | string;\n  onDragStop?: (s: Types.CropperState) => void;\n  onChange?: (s: Types.CropperState) => void;\n  cropperRef?: React.ForwardedRef<Types.CropperRef>;\n  pointSize?: number;\n  lineWidth?: number;\n  pointBgColor?: string;\n  pointBorder?: string;\n  lineColor?: string;\n  maxWidth?: number;\n  maxHeight?: number;\n  displayGrid?: boolean;\n  openCvPath?: string;\n}\n\nconst Canvas: React.FC<ICropperRef> = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight,\n  displayGrid,\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv();\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  const magnifierCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [previewDims, setPreviewDims] = useState<Types.PreviewDimensions>();\n  const [cropPoints, setCropPoints] = useState<Types.CropPoints>();\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState<'crop' | 'preview'>('crop');\n\n  const setPreviewPaneDimensions = () => {\n    if (!canvasRef.current) return;\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(canvasRef.current.width, canvasRef.current.height, maxWidth, maxHeight);\n    setPreviewDims(newPreviewDims);\n\n    if (!previewCanvasRef.current) return;\n    previewCanvasRef.current.width = newPreviewDims.width;\n    previewCanvasRef.current.height = newPreviewDims.height;\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width;\n  };\n\n  const showPreview = (imageMat?: Mat) => {\n    if (!cv || !canvasRef.current || !previewCanvasRef.current) return;\n    const src = imageMat || cv.imread(canvasRef.current);\n    const dst = new cv.Mat();\n    const dsize = new cv.Size(0, 0);\n    cv.resize(src, dst, dsize, imageResizeRatio, imageResizeRatio, cv.INTER_AREA);\n    cv.imshow(previewCanvasRef.current, dst);\n    src.delete();\n    dst.delete();\n  };\n\n  const detectContours = () => {\n    if (!cv || !canvasRef.current) return;\n    const dst = cv.imread(canvasRef.current);\n    const ksize = new cv.Size(5, 5);\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n    cv.Canny(dst, dst, 75, 200);\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n    const contours = new cv.MatVector();\n    const hierarchy = new cv.Mat();\n    cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n    const rect = cv.boundingRect(dst);\n    dst.delete();\n    hierarchy.delete();\n    contours.delete();\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key as keyof Rect] *= imageResizeRatio;\n    });\n\n    const contourCoordinates = {\n      top: { x: rect.x + rect.width / 2, y: rect.y },\n      bottom: { x: rect.x + rect.width / 2, y: rect.y + rect.height },\n      left: { x: rect.x, y: rect.y + rect.height / 2 },\n      right: { x: rect.x + rect.width, y: rect.y + rect.height / 2 },\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height,\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height },\n    };\n\n    setCropPoints(contourCoordinates);\n  };\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop');\n    },\n    mirror: (horizontal: boolean) => {\n      if (!cv || !canvasRef.current) return;\n      mirror(cv, canvasRef.current, horizontal);\n      setPreviewPaneDimensions();\n      showPreview();\n      detectContours();\n    },\n    rotate: (angle: 90 | 180 | 270) => {\n      if (!cv || !canvasRef.current) return;\n      rotate(cv, canvasRef.current, angle);\n      setPreviewPaneDimensions();\n      showPreview();\n      detectContours();\n    },\n    done: async (opts = {}) => {\n      return new Promise<Blob>((resolve, reject) => {\n        setLoading(true);\n        if (!cv || !canvasRef.current || !cropPoints) {\n          reject(new Error('OpenCV not loaded or canvas not initialized'));\n          return;\n        }\n\n        transform(cv, canvasRef.current, cropPoints, imageResizeRatio, setPreviewPaneDimensions);\n        applyFilter(cv, canvasRef.current, opts.filterCvParams);\n        if (opts.preview) {\n          setMode('preview');\n        }\n        canvasRef.current.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create blob'));\n            } else {\n              resolve(blob);\n            }\n            setLoading(false);\n          },\n          image instanceof File ? image.type : 'image/png'\n        );\n      });\n    },\n  }));\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview();\n    }\n  }, [mode]);\n\n  const createCanvas = async (src: string) => {\n    return new Promise<void>((resolve) => {\n      const img = document.createElement('img');\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas');\n        canvasRef.current.width = img.width;\n        canvasRef.current.height = img.height;\n        const ctx = canvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n        ctx?.drawImage(img, 0, 0);\n        setPreviewPaneDimensions();\n        resolve();\n      };\n      if (isCrossOriginURL(src)) img.crossOrigin = 'anonymous';\n      img.src = src;\n    });\n  };\n\n  const clearMagnifier = () => {\n    if (!magnifierCanvasRef.current) return;\n    const magnCtx = magnifierCanvasRef.current.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n    magnCtx?.clearRect(0, 0, magnifierCanvasRef.current.width, magnifierCanvasRef.current.height);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onChange?.({ ...cropPoints!, loading });\n  }, [cropPoints, loading]);\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image);\n      if (!src) return;\n      await createCanvas(src);\n      showPreview();\n      detectContours();\n      setLoading(false);\n    };\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap();\n    } else {\n      setLoading(true);\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode]);\n\n  const updateCropPoints = (position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n\n    if (area.includes('-')) {\n      cp[area] = { x, y };\n      if (area.includes('left')) {\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n      }\n      if (area.includes('right')) {\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n      if (area.includes('top')) {\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n      }\n      if (area.includes('bottom')) {\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      }\n    } else {\n      const dx = x - cp[area].x;\n      const dy = y - cp[area].y;\n      if (area === 'left') {\n        cp['left-top'] = { x, y: cp['left-top'].y + dy };\n        cp['left-bottom'] = { x, y: cp['left-bottom'].y + dy };\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'right') {\n        cp['right-top'] = { x, y: cp['right-top'].y + dy };\n        cp['right-bottom'] = { x, y: cp['right-bottom'].y + dy };\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n      } else if (area === 'top') {\n        cp['left-top'] = { x: cp['left-top'].x + dx, y };\n        cp['right-top'] = { x: cp['right-top'].x + dx, y };\n        cp.top = calculateMidpoint(cp['left-top'], cp['right-top']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      } else if (area === 'bottom') {\n        cp['left-bottom'] = { x: cp['left-bottom'].x + dx, y };\n        cp['right-bottom'] = { x: cp['right-bottom'].x + dx, y };\n        cp.bottom = calculateMidpoint(cp['left-bottom'], cp['right-bottom']);\n        cp.left = calculateMidpoint(cp['left-top'], cp['left-bottom']);\n        cp.right = calculateMidpoint(cp['right-top'], cp['right-bottom']);\n      }\n    }\n    setCropPoints((prev) => ({ ...prev, ...cp } as Types.CropPoints));\n  };\n\n  const onDrag = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n\n    // Display the magnifier only when the user is dragging the vertices.\n    if (area.includes('-')) {\n      const magnCtx = magnifierCanvasRef.current?.getContext('2d', { alpha: true, willReadFrequently: true }) as CanvasRenderingContext2D;\n\n      if (!previewCanvasRef.current) return;\n\n      // TODO we should make those 5, 10 and 20 values proportionate\n      // to the point size\n      magnCtx?.drawImage(\n        previewCanvasRef.current,\n        x - (pointSize - 10),\n        y - (pointSize - 10),\n        pointSize + 5,\n        pointSize + 5,\n        x + 10,\n        y - 90,\n        pointSize + 20,\n        pointSize + 20\n      );\n    }\n    updateCropPoints(position, area, cp);\n  }, []);\n\n  const onStop = useCallback((position: Types.Point, area: keyof Types.CropPoints, cp: Types.CropPoints) => {\n    const { x, y } = position;\n    clearMagnifier();\n    updateCropPoints(position, area, cp);\n    onDragStop?.({ ...cp, [area]: { x, y } });\n  }, []);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims)),\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && previewCanvasRef.current && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef.current.offsetLeft - pointSize / 2,\n              top: previewCanvasRef.current.offsetTop - pointSize / 2,\n              right: previewCanvasRef.current.offsetLeft - pointSize / 2 + previewCanvasRef.current.offsetWidth,\n              bottom: previewCanvasRef.current.offsetTop - pointSize / 2 + previewCanvasRef.current.offsetHeight,\n            }}\n          />\n          <CropPointsDelimiters\n            displayGrid={displayGrid}\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none',\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas style={{ zIndex: 5, pointerEvents: 'none' }} ref={previewCanvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","/* eslint-disable no-param-reassign */\nimport type { CV } from 'opencv-react';\n\nimport type { CropPoints, OpenCVFilterProps } from '../types';\n\nexport const transform = (\n  cv: CV,\n  docCanvas: HTMLCanvasElement,\n  cropPoints: CropPoints,\n  imageResizeRatio: number,\n  setPreviewPaneDimensions: () => void\n) => {\n  const dst = cv.imread(docCanvas);\n\n  const bR = cropPoints['right-bottom'];\n  const bL = cropPoints['left-bottom'];\n  const tR = cropPoints['right-top'];\n  const tL = cropPoints['left-top'];\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [point.x / imageResizeRatio, point.y / imageResizeRatio]);\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio;\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio;\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1],\n  ];\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...sourceCoordinates));\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, ([] as number[]).concat(...destCoordinates));\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight);\n  // perform warp\n  cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n  cv.imshow(docCanvas, dst);\n\n  dst.delete();\n  Ms.delete();\n  Md.delete();\n  transformMatrix.delete();\n\n  setPreviewPaneDimensions();\n};\n\nexport const applyFilter = (cv: CV, docCanvas: HTMLCanvasElement, filterCvParams?: Partial<OpenCVFilterProps>) => {\n  // default options\n  const options = {\n    blur: false,\n    th: false,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: false,\n    ...filterCvParams,\n  };\n  const dst = cv.imread(docCanvas);\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5);\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n    } else {\n      dst.convertTo(dst, -1, 1, 60);\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const rotate = (cv: CV, docCanvas: HTMLCanvasElement, angle: 90 | 180 | 270) => {\n  const dst = cv.imread(docCanvas);\n  const ROT_LABELS = {\n    90: cv.ROTATE_90_CLOCKWISE,\n    180: cv.ROTATE_180,\n    270: cv.ROTATE_90_COUNTERCLOCKWISE,\n  };\n  if (ROT_LABELS[angle] !== undefined) {\n    cv.rotate(dst, dst, ROT_LABELS[angle]);\n    if (angle === 90 || angle === 270) {\n      const { width, height } = docCanvas;\n      docCanvas.width = height;\n      docCanvas.height = width;\n    }\n  }\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n\nexport const mirror = (cv: CV, docCanvas: HTMLCanvasElement, horizontal: boolean) => {\n  const dst = cv.imread(docCanvas);\n  const flipCode = horizontal ? 1 : 0;\n  cv.flip(dst, dst, flipCode);\n  cv.imshow(docCanvas, dst);\n  dst.delete();\n};\n","import { OpenCvProvider } from 'opencv-react';\nimport React from 'react';\n\nimport type { ICropperRef } from '../lib/Canvas';\nimport Canvas from '../lib/Canvas';\nimport type { CropperRef } from '../types';\n\n// eslint-disable-next-line react/display-name\nconst Cropper = React.forwardRef<CropperRef, ICropperRef>((props, ref) => {\n  if (!props.image) {\n    return null;\n  }\n\n  return (\n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  );\n});\n\nexport default Cropper;\n"],"names":["buildCropPointVertexStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","cursor","CropPoint","cropPoints","pointArea","defaultPosition","pointSize","onStop","externalOnStop","onDrag","externalOnDrag","bounds","useCallback","_","x","y","React","Draggable","axis","style","includes","flip","marginTop","undefined","marginLeft","buildCropPointEdgeStyle","CropPoints","props","previewDims","otherProps","Fragment","CropPointsDelimiters","lineWidth","lineColor","displayGrid","canvas","useRef","clearCanvas","ctx","_canvas$current","current","getContext","alpha","willReadFrequently","clearRect","drawShape","left-top","leftTop","right-top","rightTop","right-bottom","rightBottom","left-bottom","leftBottom","left","top","right","bottom","_canvas$current2","strokeStyle","pointRadius","beginPath","moveTo","lineTo","closePath","stroke","useEffect","ref","calculateMidpoint","p1","p2","buildImgContainerStyle","imageResizeRatio","Canvas","image","onDragStop","onChange","cropperRef","maxWidth","maxHeight","loaded","cvLoaded","cv","useOpenCv","canvasRef","previewCanvasRef","magnifierCanvasRef","setPreviewDims","useState","setCropPoints","loading","setLoading","mode","setMode","setPreviewPaneDimensions","newPreviewDims","calcDims","externalMaxWidth","externalMaxHeight","ratio","window","innerWidth","innerHeight","calculated","Math","round","showPreview","imageMat","src","imread","dst","Mat","dsize","Size","resize","INTER_AREA","imshow","delete","detectContours","ksize","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","useImperativeHandle","backToCrop","mirror","horizontal","docCanvas","rotate","angle","ROT_LABELS","90","ROTATE_90_CLOCKWISE","180","ROTATE_180","270","ROTATE_90_COUNTERCLOCKWISE","done","async","opts","Promise","resolve","reject","transform","bR","bL","tR","tL","sourceCoordinates","map","point","max","destCoordinates","Ms","matFromArray","CV_32FC2","concat","Md","transformMatrix","getPerspectiveTransform","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","applyFilter","filterCvParams","options","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","adaptiveThreshold","convertTo","preview","toBlob","blob","Error","File","type","clearMagnifier","magnCtx","file","reader","FileReader","onload","_event","result","onerror","err","readAsDataURL","img","document","createElement","drawImage","url","location","parts","match","protocol","hostname","port","isCrossOriginURL","crossOrigin","createCanvas","bootstrap","updateCropPoints","area","cp","dx","dy","prev","_magnifierCanvasRef$c","[object Object]","offsetLeft","offsetTop","offsetWidth","offsetHeight","pointerEvents","Cropper","forwardRef","OpenCvProvider","openCvPath"],"mappings":"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"}